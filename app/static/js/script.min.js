(()=>{(function(e){"use strict";var t=function(){setTimeout(function(){e("#spinner").length>0&&e("#spinner").removeClass("show")},1)};t(),new WOW().init(),e(window).scroll(function(){e(this).scrollTop()>300?e(".sticky-top").addClass("shadow-sm").css("top","0px"):e(".sticky-top").removeClass("shadow-sm").css("top","-100px")}),e(window).scroll(function(){e(this).scrollTop()>300?e(".back-to-top").fadeIn("slow"):e(".back-to-top").fadeOut("slow")}),e(".back-to-top").click(function(){return e("html, body").animate({scrollTop:0},1500,"easeInOutExpo"),!1}),e(".testimonial-carousel").owlCarousel({autoplay:!0,smartSpeed:1e3,items:1,dots:!0,loop:!0})})(jQuery);$(".workphoto-carousel").owlCarousel({autoplay:!0,smartSpeed:1e3,dots:!0,loop:!0,responsiveClass:!0,responsive:{0:{items:1},768:{items:2},1200:{items:3}}});$(".workphoto-single-carousel").owlCarousel({autoplay:!0,smartSpeed:1e3,items:1,dots:!0,loop:!0,responsiveClass:!0});var m,u="promoEndDate",n=5;function i(){let e=new Date;return e.setDate(e.getDate()+n),localStorage.setItem(u,e.toISOString()),e}function c(){let e=localStorage.getItem(u);return e?(e=new Date(e),new Date>=e&&(e=i())):e=i(),e}function d(){compareDate=c()}function f(e){var t=e,l=new Date,o=t.getTime()-l.getTime();o<=0&&(e=i(),o=e.getTime()-l.getTime());var s=Math.floor(o/1e3),a=Math.floor(s/60),r=Math.floor(a/60),p=Math.floor(r/24);return r%=24,a%=60,s%=60,$("#days").text(p),$("#hours").text(r),$("#minutes").text(a),$("#seconds").text(s),e}$(document).ready(function(){let e=c();m=setInterval(function(){e=f(e)},1e3),$("#promoDayEndInput").change(function(){n=parseInt($(this).val(),10),localStorage.setItem("promoDayEnd",n),d()})});})();
//# sourceMappingURL=data:application/json;base64,
